use std::str::FromStr;

use crate::ast::FunctionDef;
//use crate::ast::FuncDef;
use crate::ast::Expr;
//use crate::ast::Statement;
//use crate::ast::Program;
use crate::tokens::*;

grammar;

// Program: Program = {
//     <v:(<Statement> Semicolon)*> <last:Statement?> => {
//         let mut vec = v;
//         if let Some(e) = last {
//             vec.push(e);
//         }
//         vec
//     }
// }

pub ExprsList: Vec<Box<Expr>> = {
    <v:(<Expr> Semicolon)*> <last:Expr?> => {
        let mut vec = v;
        if let Some(e) = last {
            vec.push(e);
        }
        vec
    }
};


Expr: Box<Expr> = { 
    FunctionFullDef => Box::new(Expr::FunctionFullDef(<>)),//TODO quitar de aqui
    FunctionArrowDef => Box::new(Expr::FunctionArrowDef(<>)),
    Assignment,
    EqualityExpr,
};

EqualityExpr: Box<Expr> = {
    EqualityExpr EqualityOp ComparisonExpr  => Box::new(Expr::BinaryOp(<>)),
    ComparisonExpr,
};

Function: KeywordToken = {
    "function" => KeywordToken::FUNCTION,
};

Arrow: DelimiterToken = {
    "=>" => DelimiterToken::ARROW,
};

IdentifierList: Vec<String> = {
    <first:Identifier> <rest:(Comma Identifier)*> => {
        let mut vec = vec![first];
        for (_, id) in rest {
            vec.push(id);
        }
        vec
    }
};

FunctionArrowDef: FunctionDef = {
    Function <name:Identifier> LParen <params:IdentifierList> RParen Arrow <body:Expr> => {
        FunctionDef {
            name,
            params,
            body,
        }
    },
    Function <name:Identifier> LParen RParen Arrow <body:Expr> => {
        FunctionDef {
            name,
            params: vec![],
            body,
        }
    }
};

FunctionFullDef: FunctionDef = {
    Function <name:Identifier> LParen <params:IdentifierList> RParen <body:CodeBlock> => {
        FunctionDef {
            name,
            params,
            body,
        }
    },
    Function <name:Identifier> LParen RParen <body:CodeBlock> => {
        FunctionDef {
            name,
            params: vec![],
            body,
        }
    }
};

CodeBlock: Box<Expr> = {
    LBrace <body:ExprsList> RBrace => Box::new(Expr::CodeBlock(body)),
}

LetIn: Box<Expr> = {
    Let <a:AssignmentList> In <body:PrimaryExpr> => Box::new(Expr::LetIn(a, body)),
};

Assignment: Box<Expr> = {
    <id:Identifier> Assign <e:Expr> => Box::new(Expr::Assignment(id, e)),
}

AssignmentList: Vec<Box<Expr>> = {
    <l:AssignmentList> "," <r:Assignment> => {
        let mut l = l;
        l.push(r);
        l
    },
    <r:Assignment> => {
        let mut v = Vec::new();
        v.push(r);
        v
    },
}



EqualityOp: OperatorToken = {
    "==" => OperatorToken::EQ,
    "!=" => OperatorToken::NEQ,
};

ComparisonExpr: Box<Expr> = {
    ComparisonExpr ComparisonOp TermExpr  => Box::new(Expr::BinaryOp(<>)),
    TermExpr,
};

ComparisonOp: OperatorToken = {
    ">" => OperatorToken::GT,
    ">=" => OperatorToken::GTE,
    "<" => OperatorToken::LT,
    "<=" => OperatorToken::LTE,
};

TermExpr: Box<Expr> = {
    TermExpr TermOp FactorExpr  => Box::new(Expr::BinaryOp(<>)),
    FactorExpr,
};

TermOp: OperatorToken = {
    "+" => OperatorToken::PLUS,
    "-" => OperatorToken::MINUS,
};

FactorExpr: Box<Expr> = {
    FactorExpr FactorOp ExponentExpr  => Box::new(Expr::BinaryOp(<>)),
    ExponentExpr,
};

FactorOp: OperatorToken = {
    "*" => OperatorToken::MUL,
    "/" => OperatorToken::DIV,
    "%" => OperatorToken::MOD,
};

ExponentExpr: Box<Expr> = {
    UnaryExpr PowOp ExponentExpr => Box::new(Expr::BinaryOp(<>)),
    UnaryExpr,
};

PowOp: OperatorToken = {
    "^" => OperatorToken::POW,
};

UnaryExpr: Box<Expr> = {
    UnaryOp UnaryExpr => Box::new(Expr::UnaryOp(<>)),
    PrimaryExpr,
};

UnaryOp: OperatorToken = {
    "!" => OperatorToken::NOT,
    "-" => OperatorToken::NEG,
};

PrimaryExpr: Box<Expr> = {
    WhileLoop,
    <name:Identifier> LParen <args:ArgList> RParen => Box::new(Expr::FunctionCall(name, args)),
    Num => Box::new(Expr::Number(<>)),
    Str => Box::new(Expr::Str(<>)),
    Identifier => Box::new(Expr::Identifier(<>)),
    LParen <Expr> RParen => Box::new(*<>),
    PrintExpr,
    LetIn,
    True => Box::new(Expr::Boolean(true)),
    False => Box::new(Expr::Boolean(false)),
    CodeBlock,
};

ArgList: Vec<Box<Expr>> = {
    // Handle non-empty arguments
    <first:Expr> <rest:(<Comma> <Expr>)*> => {
        let mut args = vec![first];
        for (_, expr) in rest {
            args.push(expr);
        }
        args
    },
    // Handle empty arguments (no parameters)
    => Vec::new()
};

WhileLoop: Box<Expr> = {
    While LParen <condition:Expr> RParen <body:CodeBlock> => Box::new(Expr::WhileLoop(condition, body)),
};

IfElse: Box<Expr> = {
    If LParen <condition:Expr> RParen <if_body:Expr> Else <else_body:Expr> => {
        Box::new(Expr::IfElse(condition, if_body, else_body))
    },
}

PrintExpr: Box<Expr> = {
    Print LParen <Expr> RParen => Box::new(Expr::Print(<>)),
};

Comma: DelimiterToken = {
    "," => DelimiterToken::COMMA,
};

Assign: OperatorToken = {
    "=" => OperatorToken::ASSIGN,
};

Semicolon: DelimiterToken = {
    ";" => DelimiterToken::SEMICOLON,
};

RParen: DelimiterToken = {
    ")" => DelimiterToken::RPAREN,
};

LParen: DelimiterToken = {
    "(" => DelimiterToken::LPAREN,
};

RBrace: DelimiterToken = {
    "}" => DelimiterToken::RBRACE,
};

LBrace: DelimiterToken = {
    "{" => DelimiterToken::LBRACE,
};

Let: KeywordToken = {
    "let" => KeywordToken::LET,
};

Else: KeywordToken = {
    "else" => KeywordToken::ELSE,
};

Elif: KeywordToken = {
    "elif" => KeywordToken::ELIF,
};

In: KeywordToken = {
    "in" => KeywordToken::IN,
};

If: KeywordToken = {
    "if" => KeywordToken::IF,
};

While: KeywordToken = {
    "while" => KeywordToken::WHILE,
};

Print: KeywordToken = {
    "print" => KeywordToken::PRINT,
};

True: KeywordToken = {
    "true" => KeywordToken::TRUE,
};

False: KeywordToken = {
    "false" => KeywordToken::FALSE,
};

Identifier: String = {
    r"[A-Za-z][A-Za-z_0-9]*" => String::from_str(<>).unwrap(),
};

Num: f64 = {
    r"[0-9]+(\.[0-9]+)?" => f64::from_str(<>).unwrap(),
};

Str: String = {
    r#""([^"\\]|\\.)*""# => String::from_str(&<>[1..<>.len()-1]).unwrap(),
};