use std::str::FromStr;
// use crate::ast::FunctionDef;
// use crate::ast::FuncDef;
// use crate::ast::Expr;
// use crate::ast::Statement;

use super::tokens::*;
use crate::ast_nodes::program::{Program, Statement};
use crate::ast_nodes::expression::Expression;
use crate::ast_nodes::let_in::Assignment;
use crate::ast_nodes::function_def::FunctionDefNode;
use crate::ast_nodes::block::ExpressionList;

grammar;

pub Program: Program = {
    <v:(<Statement> Semicolon)*> <last:Statement?> => {
        let mut vec = v;
        if let Some(e) = last {
            vec.push(e);
        }
        Program{statements:vec,}
    }
}

Statement: Statement = {
    FunctionFullDef => Statement::new_function_def(<>),
    FunctionArrowDef => Statement::new_function_def(<>),
    Expr => Statement::new_expression(<>)
}

FunctionArrowDef: FunctionDefNode = {
    Function <name:Identifier> LParen <params:IdentifierList> RParen Arrow <body:Expr> => {
        FunctionDefNode::new_expr(name,params,body)
    },
    Function <name:Identifier> LParen RParen Arrow <body:Expr> => {
        FunctionDefNode::new_expr(name,vec![],body)
    }
};

FunctionFullDef: FunctionDefNode = {
    Function <name:Identifier> LParen <params:IdentifierList> RParen <body:CodeBlock> => {
        FunctionDefNode::new_expr(name,params,body)
    },
    Function <name:Identifier> LParen RParen <body:CodeBlock> => {
        FunctionDefNode::new_expr(name,vec![],body)
    }
};

Expr: Expression = { 
    DestructiveAssignExpr,
    LogicalOrExpr
};

DestructiveAssignExpr: Expression = {
    <id:Identifier> DestructiveAssignOp <e:Expr> => {
        Expression::new_destructive_assign(id, e)
    }
};

ExprsList: ExpressionList = {
    <v:(<Expr> Semicolon)*> <last:Expr?> => {
        let mut vec = v;
        if let Some(e) = last {
            vec.push(e);
        }
        ExpressionList::new(vec)
    }
};

LogicalOrExpr: Expression = {
    LogicalOrExpr LogicalOrOp LogicalAndExpr => Expression::new_binary_op(<>),
    LogicalAndExpr
};

LogicalAndExpr: Expression = {
    LogicalAndExpr LogicalAndOp EqualityExpr => Expression::new_binary_op(<>),
    EqualityExpr
};

EqualityExpr: Expression = {
    EqualityExpr EqualityOp ComparisonExpr => Expression::new_binary_op(<>),
    ComparisonExpr,
};

ComparisonExpr: Expression = {
    ComparisonExpr ComparisonOp TermExpr => Expression::new_binary_op(<>),
    TermExpr,
};

TermExpr: Expression = {
    TermExpr TermOp FactorExpr => Expression::new_binary_op(<>),
    FactorExpr,
};

FactorExpr: Expression = {
    FactorExpr FactorOp ExponentExpr => Expression::new_binary_op(<>),
    ExponentExpr,
};

ExponentExpr: Expression = {
    UnaryExpr PowOp ExponentExpr => Expression::new_binary_op(<>),
    UnaryExpr,
};

UnaryExpr: Expression = {
    UnaryOp UnaryExpr => Expression::new_unary_op(<>),
    PrimaryExpr,
};

IdentifierList: Vec<String> = {
    <first:Identifier> <rest:(Comma Identifier)*> => {
        let mut vec = vec![first];
        for (_, id) in rest {
            vec.push(id);
        }
        vec
    }
};

Assignment: Assignment = {
    <id:Identifier> Assign <e:Expr> => Assignment::new(id,e),
}

AssignmentList: Vec<Assignment> = {
    <l:AssignmentList> "," <r:Assignment> => {
        let mut l = l;
        l.push(r);
        l
    },
    <r:Assignment> => {
        let mut v = Vec::new();
        v.push(r);
        v
    },
}

ArgList: Vec<Expression> = {
    // Handle non-empty arguments
    <first:Expr> <rest:(<Comma> <Expr>)*> => {
        let mut args = vec![first];
        for (_, expr) in rest {
            args.push(expr);
        }
        args
    },
    // Handle empty arguments (no parameters)
    => Vec::new()
};

CodeBlock: Expression = {
    LBrace <body:ExprsList> RBrace => Expression::new_code_block(body),
}

LetIn: Expression = {
    Let <a:AssignmentList> In <body:PrimaryExpr> => Expression::new_let_in(a,body),
};

WhileLoop: Expression = {
    While LParen <condition:Expr> RParen <body:PrimaryExpr> => Expression::new_while_loop(condition,body),
};

//Maybe catch these errors in a different place (Like Semantic Analysis)
ForLoop: Expression = {
    For LParen <id:Identifier> In <call:PrimaryExpr> RParen <body:PrimaryExpr> => {
        if let Expression::FunctionCall(func_call) = call {
            if func_call.function_name == "range" && func_call.arguments.len() == 2 {
                let mut args = func_call.arguments;
                let start = args.remove(0);
                let end = args.remove(0);
                
                Expression::new_for_loop(id, start, end, body)
            } else {
                panic!("For loop must use `range` with exactly two arguments");
            }
        } else {
            panic!("For loop iterable must be a `range` function call");
        }
    }
};

IfElse: Expression = {
    If LParen <condition:Expr> RParen <if_body:PrimaryExpr> Else <else_body:PrimaryExpr> => {
        Expression::new_if_else(condition,if_body,else_body)
    },
}

PrimaryExpr: Expression = {
    WhileLoop,
    ForLoop,
    <name:Identifier> LParen <args:ArgList> RParen => Expression::new_function_call(name, args),
    Num => Expression::new_number(<>),
    Str => Expression::new_string(<>),
    Identifier => Expression::new_identifier(<>),
    LParen <Expr> RParen => <>,
    LetIn,
    True => Expression::new_boolean(true),
    False => Expression::new_boolean(false),
    CodeBlock,
    IfElse,
};

Identifier: String = {
    r"[A-Za-z][A-Za-z_0-9]*" => String::from_str(<>).unwrap(),
};

Num: String = {
    r"[0-9]+(\.[0-9]+)?" => String::from_str(<>).unwrap(),
};

Str: String = {
    r#""([^"\\]|\\.)*""# => String::from_str(&<>[1..<>.len()-1]).unwrap(),
};

// PrintExpr: Box<Expr> = {
//     Print LParen <Expr> RParen => Box::new(Expr::Print(<>)),
// };

UnaryOp: OperatorToken = {
    "!" => OperatorToken::NOT,
    "-" => OperatorToken::NEG,
};

PowOp: OperatorToken = {
    "^" => OperatorToken::POW,
};

FactorOp: OperatorToken = {
    "*" => OperatorToken::MUL,
    "/" => OperatorToken::DIV,
    "%" => OperatorToken::MOD,
};

TermOp: OperatorToken = {
    "+" => OperatorToken::PLUS,
    "-" => OperatorToken::MINUS,
    "@" => OperatorToken::CONCAT,
};

ComparisonOp: OperatorToken = {
    ">" => OperatorToken::GT,
    ">=" => OperatorToken::GTE,
    "<" => OperatorToken::LT,
    "<=" => OperatorToken::LTE,
};

Function: KeywordToken = {
    "function" => KeywordToken::FUNCTION,
};

Arrow: DelimiterToken = {
    "=>" => DelimiterToken::ARROW,
};

EqualityOp: OperatorToken = {
    "==" => OperatorToken::EQ,
    "!=" => OperatorToken::NEQ,
};

Comma: DelimiterToken = {
    "," => DelimiterToken::COMMA,
};

Assign: OperatorToken = {
    "=" => OperatorToken::ASSIGN,
};

DestructiveAssignOp: OperatorToken = {
    ":=" => OperatorToken::DASSIGN
};

LogicalAndOp: OperatorToken = {
    "&" => OperatorToken::AND,
};

LogicalOrOp: OperatorToken = {
    "|" => OperatorToken::OR,
};

Semicolon: DelimiterToken = {
    ";" => DelimiterToken::SEMICOLON,
};

RParen: DelimiterToken = {
    ")" => DelimiterToken::RPAREN,
};

LParen: DelimiterToken = {
    "(" => DelimiterToken::LPAREN,
};

RBrace: DelimiterToken = {
    "}" => DelimiterToken::RBRACE,
};

LBrace: DelimiterToken = {
    "{" => DelimiterToken::LBRACE,
};

Let: KeywordToken = {
    "let" => KeywordToken::LET,
};

Else: KeywordToken = {
    "else" => KeywordToken::ELSE,
};

Elif: KeywordToken = {
    "elif" => KeywordToken::ELIF,
};

In: KeywordToken = {
    "in" => KeywordToken::IN,
};

If: KeywordToken = {
    "if" => KeywordToken::IF,
};

While: KeywordToken = {
    "while" => KeywordToken::WHILE,
};

For: KeywordToken = {
    "for" => KeywordToken::FOR,
};

// Print: KeywordToken = {
//     "print" => KeywordToken::PRINT,
// };

True: KeywordToken = {
    "true" => KeywordToken::TRUE,
};

False: KeywordToken = {
    "false" => KeywordToken::FALSE,
};

