// use crate::ast::FunctionDef;
// use crate::ast::FuncDef;
// use crate::ast::Expr;
// use crate::ast::Statement;

use super::tokens::{Span, KeywordToken, OperatorToken, DelimiterToken};
use crate::ast_nodes::program::{Program, Statement};
use crate::ast_nodes::expression::Expression;
use crate::ast_nodes::let_in::Assignment;
use crate::ast_nodes::function_def::{FunctionDefNode,FunctionParams};
use crate::ast_nodes::block::ExpressionList;
use crate::ast_nodes::type_def::{TypeDefNode, TypeInherits, TypeMember};
use crate::ast_nodes::function_call::FunctionCallNode;

grammar;

pub Program: Program = {
    <v:(<Statement> Semicolon)*> <last:Statement?> Semicolon  => {
        let mut vec = v;
        if let Some(e) = last {
            vec.push(e);
        }
        Program{statements:vec,}
    }
}

Statement: Statement = {
    FunctionFullDef => Statement::new_function_def(<>),
    FunctionArrowDef => Statement::new_function_def(<>),
    TypeDef => Statement::new_type_def(<>),
    Expr => Statement::new_expression(<>)
}

FunctionArrowDef: FunctionDefNode = {
    <s: @L> Function <name:Identifier> LParen <params:IdentifierList> RParen Colon <sig:Signature> Arrow <body:Expr> <e: @R> => {
        FunctionDefNode::new_expr(name.0, params, sig.0, body, Span::new(s, e))
    },
    <s: @L> Function <name:Identifier> LParen RParen Colon <sig:Signature> Arrow <body:Expr> <e: @R> => {
        FunctionDefNode::new_expr(name.0, vec![], sig.0, body, Span::new(s, e))
    }
};

FunctionFullDef: FunctionDefNode = {
    <s: @L> Function <name:Identifier> LParen <params:IdentifierList> RParen Colon <sig:Signature> <body:CodeBlock> <e: @R> => {
        FunctionDefNode::new_expr(name.0, params, sig.0, body, Span::new(s, e))
    },
    <s: @L> Function <name:Identifier> LParen RParen Colon <sig:Signature> <body:CodeBlock> <e: @R> => {
        FunctionDefNode::new_expr(name.0, vec![], sig.0, body, Span::new(s, e))
    }
};

FunctionCall: Expression = {
    <s: @L> <name:Identifier> <args:ArgList> <e: @R> => Expression::new_function_call(name.0, args, Span::new(s, e))
};

TypeDef: TypeDefNode = {
    <s: @L> Type <name:Identifier> <p:Params?> <i:Inheritance?> LBrace <b:TypeBodyDef> RBrace <e: @R> => {
        let p = p.unwrap_or_default();
        let span = Span::new(s, e);
        if let Some(inherits) = i {
            TypeDefNode::new(name.0, p, Some(inherits.identifier), inherits.params, b, span)
        } else {
            TypeDefNode::new(name.0, p, None, Vec::new(), b, span)
        }
    }
};

TypeBodyDef: Vec<TypeMember> = {
    <h:(<MemberDef> Semicolon)*> <t:MemberDef?> => {
        let mut vec = h;
        if let Some(e) = t {
            vec.push(e);
        }
        vec
    }
};

MemberDef: TypeMember = {
    TypeMemberAssignment,
    TypeMemberFunctionDef
};

TypeMemberAssignment: TypeMember = {
    <s: @L> <id:Identifier> Assign <e:Expr> <end: @R> => TypeMember::new_property(Assignment::new(id.0, e, Span::new(s, end)))
};

TypeMemberFunctionDef: TypeMember = {
    <s: @L> <i:Identifier> LParen <params:IdentifierList> RParen Colon <sig:Signature> Arrow <body:Expr> <e: @R> => {
        TypeMember::new_method(FunctionDefNode::new_expr(i.0, params, sig.0, body, Span::new(s, e)))
    },
    <s: @L> <i:Identifier> LParen RParen Colon <sig:Signature> Arrow <body:Expr> <e: @R> => {
        TypeMember::new_method(FunctionDefNode::new_expr(i.0, Vec::new(), sig.0, body, Span::new(s, e)))
    },
    <s: @L> <i:Identifier> LParen <params:IdentifierList> RParen Colon <sig:Signature> <body:CodeBlock> <e: @R> => {
        TypeMember::new_method(FunctionDefNode::new_expr(i.0, params, sig.0, body, Span::new(s, e)))
    },
    <s: @L> <i:Identifier> LParen RParen Colon <sig:Signature> <body:CodeBlock> <e: @R> => {
        TypeMember::new_method(FunctionDefNode::new_expr(i.0, Vec::new(), sig.0, body, Span::new(s, e)))
    }
};


Inheritance: TypeInherits = {
    <s: @L> Inherits <parent:Identifier> <p:ArgList> <e: @R> => TypeInherits::new(parent.0, p, Span::new(s, e)),
    <s: @L> Inherits <parent:Identifier> <e: @R> => TypeInherits::new(parent.0, Vec::new(), Span::new(s, e))
}

TypeFunctionAccess: Expression = {
    <s: @L> <object:PrimaryExpr> DotOp <name:Identifier> <args:ArgList> <e: @R> => 
        Expression::new_type_function_access(object, FunctionCallNode::new(name.0, args, Span::new(s, e)), Span::new(s, e))
}

TypePropAccess: Expression = {
    <s: @L> <object:PrimaryExpr> DotOp <name:Identifier> <e: @R> => 
        Expression::new_type_prop_access(object, name.0, Span::new(s, e))
};

Expr: Expression = { 
    DestructiveAssignExpr,
    LogicalOrExpr 
};

DestructiveAssignExpr: Expression = {
    <s: @L> <id:PrimaryExpr> DestructiveAssignOp <e:Expr> <end: @R> => {
        Expression::new_destructive_assign(id, e, Span::new(s, end))
    }
};

ExprsList: ExpressionList = {
    <v:(<Expr> Semicolon)*> <last:Expr?> => {
        let mut vec = v;
        if let Some(e) = last {
            vec.push(e);
        }
        ExpressionList::new(vec)
    }
};

LogicalOrExpr: Expression = {
    <s: @L> <left:LogicalOrExpr> <op:LogicalOrOp> <right:LogicalAndExpr> <e: @R> => 
        Expression::new_binary_op(left, op.0, right, Span::new(s, e)),
    LogicalAndExpr => <>
};

LogicalAndExpr: Expression = {
    <s: @L> <left:LogicalAndExpr> <op:LogicalAndOp> <right:EqualityExpr> <e: @R> => 
        Expression::new_binary_op(left, op.0, right, Span::new(s, e)),
    EqualityExpr => <>
};

EqualityExpr: Expression = {
    <s: @L> <left:EqualityExpr> <op:EqualityOp> <right:ComparisonExpr> <e: @R> => 
        Expression::new_binary_op(left, op.0, right, Span::new(s, e)),
    ComparisonExpr => <>
};

ComparisonExpr: Expression = {
    <s: @L> <left:ComparisonExpr> <op:ComparisonOp> <right:TermExpr> <e: @R> => 
        Expression::new_binary_op(left, op.0, right, Span::new(s, e)),
    TermExpr => <>
};

TermExpr: Expression = {
    <s: @L> <left:TermExpr> <op:TermOp> <right:FactorExpr> <e: @R> => 
        Expression::new_binary_op(left, op.0, right, Span::new(s, e)),
    FactorExpr => <>
};

FactorExpr: Expression = {
    <s: @L> <left:FactorExpr> <op:FactorOp> <right:ExponentExpr> <e: @R> => 
        Expression::new_binary_op(left, op.0, right, Span::new(s, e)),
    ExponentExpr => <>
};

ExponentExpr: Expression = {
    <s: @L> <left:UnaryExpr> <op:PowOp> <right:ExponentExpr> <e: @R> => 
        Expression::new_binary_op(left, op.0, right, Span::new(s, e)),
    UnaryExpr => <>
};

UnaryExpr: Expression = {
    <s: @L> <op:UnaryOp> <expr:UnaryExpr> <e: @R> => 
        Expression::new_unary_op(op.0, expr, Span::new(s, e)),
    CompositeExpr => <>
};

IdentifierList: Vec<FunctionParams> = {
    <first:Identifier> Colon <s:Signature> <rest:(Comma Identifier Colon Signature)*> => {
        let mut vec = vec![FunctionParams::new(first.0, s.0, first.1)];
        for (_, id,_,signature) in rest {
            vec.push(FunctionParams::new(id.0, signature.0, id.1));
        }
        vec
    }
};

Params: Vec<FunctionParams> = {
    LParen <params:IdentifierList> RParen => params,
    LParen RParen => Vec::new()
};

Assignment: Assignment = {
    <s: @L> <id:Identifier> Assign <e:Expr> <end: @R> => Assignment::new(id.0, e, Span::new(s, end))
}

AssignmentList: Vec<Assignment> = {
    <l:AssignmentList> "," <r:Assignment> => {
        let mut l = l;
        l.push(r);
        l
    },
    <r:Assignment> => {
        let mut v = Vec::new();
        v.push(r);
        v
    },
}

PropsAssigment: Vec<Assignment> = {
    <h:PropsAssigment> ";" <t:Assignment> => {
        let mut h = h;
        h.push(t);
        h
    },
    <t:Assignment> => {
        let mut v = Vec::new();
        v.push(t);
        v
    },
}

ArgList: Vec<Expression> = {
    LParen <first:Expr> <rest:(<Comma> <Expr>)*> RParen => {
        let mut args = vec![first];
        for (_, expr) in rest {
            args.push(expr);
        }
        args
    },
    LParen RParen => Vec::new()
};

CodeBlock: Expression = {
    <s: @L> LBrace <body:ExprsList> RBrace <e: @R> => Expression::new_code_block(body)
}

LetIn: Expression = {
    <s: @L> Let <a:AssignmentList> In <body:CompositeExpr> <e: @R> => Expression::new_let_in(a, body, Span::new(s, e))
};

WhileLoop: Expression = {
    <s: @L> While LParen <condition:Expr> RParen <body:CompositeExpr> <e: @R> => Expression::new_while_loop(condition, body, Span::new(s, e))
};

ForLoop: Expression = {
    <s: @L> For LParen <id:Identifier> In "range" LParen <start:Expr> Comma <end:Expr> RParen RParen <body:CompositeExpr> <e: @R> => 
        Expression::new_for_loop(id.0, start, end, body, Span::new(s, e))
};

IfElse: Expression = {
    <s: @L> If LParen <condition:Expr> RParen <if_body:CodeBlock> <e: @R> => Expression::new_if_else(condition, if_body, Vec::new(), Span::new(s, e)),
    <s: @L> If LParen <condition:Expr> RParen <if_body:CodeBlock> <else_or_elif:ElseOrElif> <e: @R> => Expression::new_if_else(condition, if_body, else_or_elif, Span::new(s, e))
}

ElseOrElif: Vec<(Option<Expression>, Expression)> = {
    Else <else_expr:CodeBlock> => vec![(None, else_expr)],
    Elif LParen <cond:Expr> RParen <body:CodeBlock> <rest:ElseOrElif> => {
        let mut exprs = vec![(Some(cond), body)];
        exprs.extend(rest);
        exprs
    }
}

CompositeExpr: Expression = {
    LetIn,
    IfElse,
    WhileLoop,
    ForLoop,
    PrimaryExpr
}

PrimaryExpr: Expression = {
    FunctionCall,
    <s: @L> New <name:Identifier> <args:ArgList> <e: @R> => Expression::new_type_instance(name.0, args, Span::new(s, e)),
    TypeFunctionAccess,
    TypePropAccess,
    <n:Num> => Expression::new_number(n.0, n.1),
    <str_val:Str> => Expression::new_string(str_val.0, str_val.1),
    <id:Identifier> => Expression::new_identifier(id.0, id.1),
    LParen <e:Expr> RParen => e,
    <s: @L> True <e: @R> => Expression::new_boolean(true, Span::new(s, e)),
    <s: @L> False <e: @R> => Expression::new_boolean(false, Span::new(s, e)),
    CodeBlock,
    PrintExpr
};

// Token definitions
Identifier: (String, Span) = {
    <s: @L> <id: r"[A-Za-z][A-Za-z_0-9]*"> <e: @R> => 
        (id.to_string(), Span::new(s, e))
};

Num: (String, Span) = {
    <s: @L> <num: r"[0-9]+(\.[0-9]+)?"> <e: @R> => 
        (num.to_string(), Span::new(s, e))
};

Str: (String, Span) = {
    <s: @L> <str_val: r#""([^"\\]|\\.)*""#> <e: @R> => 
        (str_val[1..str_val.len()-1].to_string(), Span::new(s, e))
};

PrintExpr: Expression = {
    <s: @L> Print LParen <e:Expr> RParen <e_end: @R> => Expression::new_print(e, Span::new(s, e_end))
};

UnaryOp: (OperatorToken, Span) = {
    <s: @L> "!" <e: @R> => (OperatorToken::NOT, Span::new(s, e)),
    <s: @L> "-" <e: @R> => (OperatorToken::NEG, Span::new(s, e))
};

PowOp: (OperatorToken, Span) = {
    <s: @L> "^" <e: @R> => (OperatorToken::POW, Span::new(s, e))
};

FactorOp: (OperatorToken, Span) = {
    <s: @L> "*" <e: @R> => (OperatorToken::MUL, Span::new(s, e)),
    <s: @L> "/" <e: @R> => (OperatorToken::DIV, Span::new(s, e)),
    <s: @L> "%" <e: @R> => (OperatorToken::MOD, Span::new(s, e))
};

TermOp: (OperatorToken, Span) = {
    <s: @L> "+" <e: @R> => (OperatorToken::PLUS, Span::new(s, e)),
    <s: @L> "-" <e: @R> => (OperatorToken::MINUS, Span::new(s, e)),
    <s: @L> "@" <e: @R> => (OperatorToken::CONCAT, Span::new(s, e))
};

ComparisonOp: (OperatorToken, Span) = {
    <s: @L> ">" <e: @R> => (OperatorToken::GT, Span::new(s, e)),
    <s: @L> ">=" <e: @R> => (OperatorToken::GTE, Span::new(s, e)),
    <s: @L> "<" <e: @R> => (OperatorToken::LT, Span::new(s, e)),
    <s: @L> "<=" <e: @R> => (OperatorToken::LTE, Span::new(s, e))
};

Function: (KeywordToken, Span) = {
    <s: @L> "function" <e: @R> => (KeywordToken::FUNCTION, Span::new(s, e))
};

Arrow: (DelimiterToken, Span) = {
    <s: @L> "=>" <e: @R> => (DelimiterToken::ARROW, Span::new(s, e))
};

EqualityOp: (OperatorToken, Span) = {
    <s: @L> "==" <e: @R> => (OperatorToken::EQ, Span::new(s, e)),
    <s: @L> "!=" <e: @R> => (OperatorToken::NEQ, Span::new(s, e))
};

Comma: (DelimiterToken, Span) = {
    <s: @L> "," <e: @R> => (DelimiterToken::COMMA, Span::new(s, e))
};

Colon: (DelimiterToken, Span) = {
    <s: @L> ":" <e: @R> => (DelimiterToken::COLON, Span::new(s, e))
}

Assign: (OperatorToken, Span) = {
    <s: @L> "=" <e: @R> => (OperatorToken::ASSIGN, Span::new(s, e))
};

DestructiveAssignOp: (OperatorToken, Span) = {
    <s: @L> ":=" <e: @R> => (OperatorToken::DASSIGN, Span::new(s, e))
};

LogicalAndOp: (OperatorToken, Span) = {
    <s: @L> "&" <e: @R> => (OperatorToken::AND, Span::new(s, e))
};

LogicalOrOp: (OperatorToken, Span) = {
    <s: @L> "|" <e: @R> => (OperatorToken::OR, Span::new(s, e))
};

DotOp: (OperatorToken, Span) = {
    <s: @L> "." <e: @R> => (OperatorToken::DOT, Span::new(s, e))
};

Semicolon: (DelimiterToken, Span) = {
    <s: @L> ";" <e: @R> => (DelimiterToken::SEMICOLON, Span::new(s, e))
};

RParen: (DelimiterToken, Span) = {
    <s: @L> ")" <e: @R> => (DelimiterToken::RPAREN, Span::new(s, e))
};

LParen: (DelimiterToken, Span) = {
    <s: @L> "(" <e: @R> => (DelimiterToken::LPAREN, Span::new(s, e))
};

RBrace: (DelimiterToken, Span) = {
    <s: @L> "}" <e: @R> => (DelimiterToken::RBRACE, Span::new(s, e))
};

LBrace: (DelimiterToken, Span) = {
    <s: @L> "{" <e: @R> => (DelimiterToken::LBRACE, Span::new(s, e))
};

Let: (KeywordToken, Span) = {
    <s: @L> "let" <e: @R> => (KeywordToken::LET, Span::new(s, e))
};

Else: (KeywordToken, Span) = {
    <s: @L> "else" <e: @R> => (KeywordToken::ELSE, Span::new(s, e))
};

Elif: (KeywordToken, Span) = {
    <s: @L> "elif" <e: @R> => (KeywordToken::ELIF, Span::new(s, e))
};

In: (KeywordToken, Span) = {
    <s: @L> "in" <e: @R> => (KeywordToken::IN, Span::new(s, e))
};

If: (KeywordToken, Span) = {
    <s: @L> "if" <e: @R> => (KeywordToken::IF, Span::new(s, e))
};

While: (KeywordToken, Span) = {
    <s: @L> "while" <e: @R> => (KeywordToken::WHILE, Span::new(s, e))
};

For: (KeywordToken, Span) = {
    <s: @L> "for" <e: @R> => (KeywordToken::FOR, Span::new(s, e))
};

Type: (KeywordToken, Span) = {
    <s: @L> "type" <e: @R> => (KeywordToken::TYPE, Span::new(s, e))
}

Inherits: (KeywordToken, Span) = {
    <s: @L> "inherits" <e: @R> => (KeywordToken::INHERITS, Span::new(s, e))
};

New: (KeywordToken, Span) = {
    <s: @L> "new" <e: @R> => (KeywordToken::NEW, Span::new(s, e))
};

Print: (KeywordToken, Span) = {
    <s: @L> "print" <e: @R> => (KeywordToken::PRINT, Span::new(s, e))
};

True: (KeywordToken, Span) = {
    <s: @L> "true" <e: @R> => (KeywordToken::TRUE, Span::new(s, e))
};

False: (KeywordToken, Span) = {
    <s: @L> "false" <e: @R> => (KeywordToken::FALSE, Span::new(s, e))
};

Signature: (String, Span) = {
    <s: @L> <sig: r"[A-Za-z][A-Za-z_0-9]*"> <e: @R> => 
        (sig.to_string(), Span::new(s, e))
};