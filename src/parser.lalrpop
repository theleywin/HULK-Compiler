use std::str::FromStr;

use crate::ast::Expr;
use crate::tokens::*;

grammar;

pub ExprsList: Vec<Box<Expr>> = {
    <v:(<Expr> Semicolon)*> => v
};

Expr: Box<Expr> = { EqualityExpr };

EqualityExpr: Box<Expr> = {
    <left:ComparisonExpr> <rest:(EqualityOp ComparisonExpr)*> => {
        rest.into_iter().fold(left, |l, (op, r)| {
            Box::new(Expr::BinaryOp(l, op, r))
        })
    }
};

EqualityOp: OperatorToken = {
    "==" => OperatorToken::EQ,
    "!=" => OperatorToken::NEQ,
};

ComparisonExpr: Box<Expr> = {
    <left:TermExpr> <rest:(ComparisonOp TermExpr)*> => {
        rest.into_iter().fold(left, |l, (op, r)| {
            Box::new(Expr::BinaryOp(l, op, r))
        })
    }
};

ComparisonOp: OperatorToken = {
    ">" => OperatorToken::GT,
    ">=" => OperatorToken::GTE,
    "<" => OperatorToken::LT,
    "<=" => OperatorToken::LTE,
};

TermExpr: Box<Expr> = {
    <left:FactorExpr> <rest:(TermOp FactorExpr)*> => {
        rest.into_iter().fold(left, |l, (op, r)| {
            Box::new(Expr::BinaryOp(l, op, r))
        })
    }
};

TermOp: OperatorToken = {
    "+" => OperatorToken::PLUS,
    "-" => OperatorToken::MINUS,
};

FactorExpr: Box<Expr> = {
    <left:ExponentExpr> <rest:(FactorOp ExponentExpr)*> => {
        rest.into_iter().fold(left, |l, (op, r)| {
            Box::new(Expr::BinaryOp(l, op, r))
        })
    }
};

FactorOp: OperatorToken = {
    "*" => OperatorToken::MUL,
    "/" => OperatorToken::DIV,
    "%" => OperatorToken::MOD,
};

ExponentExpr: Box<Expr> = {
    <left:UnaryExpr> <op:PowOp> <right:ExponentExpr> => Box::new(Expr::BinaryOp(left, op, right)),
    UnaryExpr,
};

PowOp: OperatorToken = {
    "^" => OperatorToken::POW,
};

UnaryExpr: Box<Expr> = {
    <op:UnaryOp> <expr:UnaryExpr> => Box::new(Expr::UnaryOp(op, expr)),
    PrimaryExpr,
};

UnaryOp: OperatorToken = {
    "!" => OperatorToken::NOT,
    "-" => OperatorToken::NEG,
};

PrimaryExpr: Box<Expr> = {
    Num => Box::new(Expr::Number(<>)),
    LParen <Expr> RParen => Box::new(*<>),
    PrintExpr,
};

PrintExpr: Box<Expr> = {
    Print LParen <Expr> RParen => Box::new(Expr::Print(<>)),
};

Semicolon: DelimiterToken = {
    ";" => DelimiterToken::SEMICOLON,
};

RParen: DelimiterToken = {
    ")" => DelimiterToken::RPAREN,
};

LParen: DelimiterToken = {
    "(" => DelimiterToken::LPAREN,
};

RBrace: DelimiterToken = {
    "}" => DelimiterToken::RBRACE,
};

LBrace: DelimiterToken = {
    "{" => DelimiterToken::LBRACE,
};

Let: KeywordToken = {
    "let" => KeywordToken::LET,
};

Else: KeywordToken = {
    "else" => KeywordToken::ELSE,
};

Elif: KeywordToken = {
    "elif" => KeywordToken::ELIF,
};

In: KeywordToken = {
    "in" => KeywordToken::IN,
};

If: KeywordToken = {
    "if" => KeywordToken::IF,
};

While: KeywordToken = {
    "while" => KeywordToken::WHILE,
};

Print: KeywordToken = {
    "print" => KeywordToken::PRINT,
};

Id: String = {
    r"[A-Za-z][A-Za-z_0-9]*" => String::from_str(<>).unwrap(),
};

Num: i32 = {
    r"[0-9]+(\.[0-9]+)?" => i32::from_str(<>).unwrap(),
};

